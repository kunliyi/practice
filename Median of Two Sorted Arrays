//There are two sorted arrays nums1 and nums2 of size m and n respectively.

//Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int totalSize = nums1.length + nums2.length;
        int mid;
        if(totalSize%2==0){
            mid = totalSize/2-1;
            return medianHelperEven(nums1,nums2,mid);
        }
        else{//totalSize%2 == 1
            mid = totalSize/2;
            return medianHelperOdd(nums1, nums2, mid);
        }
    }
    public double medianHelperOdd(int[] nums1, int[] nums2, int mid){
        int index1 = 0, index2 = 0;
        while(index1+index2 < mid){
            if(nums1.length == index1)
                return (double)nums2[index2+(mid-index1-index2)];   
            if(nums2.length == index2)
                return (double)nums1[index1+(mid-index1-index2)];
            if(nums1[index1] < nums2[index2])
                index1++;
            else
                index2++;
        }
        if(nums1.length == index1)
            return (double)nums2[index2+(mid-index1-index2)];   
        if(nums2.length == index2)
            return (double)nums1[index1+(mid-index1-index2)];
        if(nums1[index1]<nums2[index2])
            return (float)nums1[index1];
        else
            return (float)nums2[index2];
    }
    public double medianHelperEven(int[] nums1, int[] nums2, int mid){
        int index1 = 0, index2 = 0;
        while(index1+index2 < mid){//find median
            if(nums1.length == index1)//if end of nums1 is reached, find median from remainder of num2
                return (double)(nums2[index2+(mid-index1-index2)]+nums2[mid-index1+1])/2;
            if(nums2.length == index2)//if end of nums2 is reached, find median from remainder of nums1
                return (double)(nums1[index1+(mid-index1-index2)]+nums1[mid-index2+1])/2;
            if(nums1[index1] < nums2[index2])//increase index until mid is found
                index1++;
            else
                index2++;
        }
        if(nums1.length == index1)//if end of nums1 is reached, find median from remainder of num2
            return (double)(nums2[index2+(mid-index1-index2)]+nums2[mid-index1+1])/2;
        if(nums2.length == index2)//if end of nums2 is reached, find median from remainder of nums1
            return (double)(nums1[index1+(mid-index1-index2)]+nums1[mid-index2+1])/2;
        //if neither end is reached, choose if medium is from num1, num2, or both
        if(nums1[index1] < nums2[index2]){
            if(nums1.length <= index1+1)
                return (float)(nums1[index1]+nums2[index2])/2;
            else if(nums1[index1+1]<nums2[index2])
                return (float)(nums1[index1]+nums1[index1+1])/2;
            else
                return (float)(nums1[index1]+nums2[index2])/2;
        }
        else{
            if(nums2.length <= index2+1)
                return (float)(nums2[index2]+nums1[index1])/2;
            else if(nums2[index2+1]<nums1[index1])
                return (float)(nums2[index2]+nums2[index2+1])/2;
            else
                return (float)(nums2[index2]+nums1[index1])/2;
        }
    }
}
